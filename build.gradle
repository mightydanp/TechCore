plugins {
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.+'
}

group= mod_group_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

java.sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/forge/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "src/forge/resources"]
        }

        runs {
            modIdentifier = project.mod_id
        }
    }
}

runs {
    configureEach {
        workingDirectory project.file('run')
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
	
	compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"
}

modDependencies = []
modMixins = ["${mod_mixins}"]

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version        : minecraft_version,
			minecraft_version_range  : minecraft_version_range,
            neo_version              : neo_version,
			neo_version_range        : neo_version_range,
            loader_version_range     : loader_version_range,
            mod_id                   : mod_id,
			mod_name                 : mod_name,
			mod_license              : mod_license,
			mod_version              : mod_version,
            mod_authors              : mod_authors,
			mod_description          : mod_description,
			mod_group_id             : mod_group_id,
			mod_issue_tracker_url    : mod_issue_tracker_url,
			mod_mixins               : mod_mixins,
            jei_version              : jei_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}